import 'package:supabase_flutter/supabase_flutter.dart';
import '../models/trash_model.dart';

class TrashService {
  final SupabaseClient _client = Supabase.instance.client;
  final String _trashTable = 'trash';

  /// üóëÔ∏è Di chuy·ªÉn file ho·∫∑c folder v√†o Trash
  Future<bool> moveToTrash({
    required String type, // 'file' ho·∫∑c 'folder'
    required String originalId,
    required String originalPath,
    required String trashPath,
  }) async {
    try {
      final user = _client.auth.currentUser;
      if (user == null) {
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p!');
        return false;
      }

      // üîπ L·∫•y profile_id t·ª´ b·∫£ng profiles d·ª±a tr√™n user.id
      final profileRes = await _client
          .from('profiles')
          .select('id')
          .eq('user_id', user.id)
          .maybeSingle();

      final profileId = profileRes?['id'];
      if (profileId == null) {
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y profile_id h·ª£p l·ªá cho user ${user.id}');
        return false;
      }

      print('üóëÔ∏è [moveToTrash] Chu·∫©n b·ªã insert v√†o trash: $originalId - $originalPath');

      await _client.from(_trashTable).insert({
        'type': type,
        'original_id': originalId,
        'original_path': originalPath,
        'trash_path': trashPath,
        'deleted_at': DateTime.now().toIso8601String(),
        'restored': false,
        'profile_id': profileId, // üîπ D√πng profile_id ƒë√∫ng
      });

      // N·∫øu l√† file, di chuy·ªÉn trong storage
      if (type == 'file') {
        await _client.storage.from('files').move(originalPath, trashPath);
      }

      // C·∫≠p nh·∫≠t c·ªù x√≥a trong b·∫£ng g·ªëc
      final table = (type == 'file') ? 'files' : 'folders';
      await _client.from(table).update({
        'is_deleted': true,
        'deleted_at': DateTime.now().toIso8601String(),
      }).eq('id', originalId);

      print('‚úÖ Move $type ($originalId) to trash for profile $profileId');
      return true;
    } catch (e) {
      print('‚ùå [moveToTrash] L·ªói: $e');
      if (e is PostgrestException) print('üîç Chi ti·∫øt: ${e.message}');
      return false;
    }
  }

  /// üìã L·∫•y t·∫•t c·∫£ file/folder trong Trash (theo ng∆∞·ªùi d√πng hi·ªán t·∫°i)
  Future<List<Trash>> fetchAllTrash() async {
    try {
      final user = _client.auth.currentUser;
      if (user == null) {
        print('‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p!');
        return [];
      }

      // üîπ L·∫•y profile_id t·ª´ b·∫£ng profiles
      final profileRes = await _client
          .from('profiles')
          .select('id')
          .eq('user_id', user.id)
          .maybeSingle();

      final profileId = profileRes?['id'];
      if (profileId == null) {
        print('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y profile_id cho user ${user.id}');
        return [];
      }

      // üîπ L·∫•y t·∫•t c·∫£ trash cho profile_id
      final response = await _client
          .from(_trashTable)
          .select('*')
          .eq('restored', false)
          .eq('profile_id', profileId)
          .order('deleted_at', ascending: false);

      final List<dynamic> data = response;
      print('üß≠ [TrashService] C√≥ ${data.length} b·∫£n ghi trong trash c·ªßa profile $profileId');

      return data.map((row) => Trash.fromMap(row as Map<String, dynamic>)).toList();
    } catch (e) {
      print('‚ùå [fetchAllTrash] L·ªói: $e');
      return [];
    }
  }

  /// ‚ôªÔ∏è Ph·ª•c h·ªìi file/folder t·ª´ Trash
  Future<bool> restoreTrash(Trash trash) async {
    try {
      final user = _client.auth.currentUser;
      if (user == null) {
        print('‚ö†Ô∏è Ch∆∞a ƒëƒÉng nh·∫≠p!');
        return false;
      }

      // N·∫øu l√† file th√¨ restore b√¨nh th∆∞·ªùng
      if (trash.type == 'file') {
        await _client.storage
            .from('files')
            .move(trash.trashPath, trash.originalPath);

        // C·∫≠p nh·∫≠t DB files
        await _client.from('files').update({
          'is_deleted': false,
          'deleted_at': null,
        }).eq('id', trash.originalId);

        // X√≥a record trong trash
        await _client.from(_trashTable).delete().eq('id', trash.id);

        print('‚ôªÔ∏è File restored: ${trash.originalPath}');
        return true;
      }

      // N·∫øu l√† folder th√¨ restore ƒë·ªá quy
      if (trash.type == 'folder') {
        final originalPath = trash.originalPath;

        // 1Ô∏è‚É£ L·∫•y t·∫•t c·∫£ file con trong folder ƒë√≥ (bao g·ªìm c√°c file trong folder con)
        final filesToRestore = await _client
            .from('files')
            .select()
            .ilike('path', '$originalPath%')
            .eq('is_deleted', true);

        for (final f in filesToRestore) {
          final fileTrashPath = f['path'] as String;
          final fileOriginalPath = fileTrashPath.replaceFirst(
            '${user.id}/Trash/',
            '${user.id}/',
          );

          // Move file trong storage
          await _client.storage.from('files').move(fileTrashPath, fileOriginalPath);

          // C·∫≠p nh·∫≠t DB
          await _client.from('files').update({
            'path': fileOriginalPath,
            'is_deleted': false,
            'deleted_at': null,
          }).eq('id', f['id']);

          // X√≥a record trong trash
          await _client.from(_trashTable).delete().eq('original_id', f['id']);
        }

        // 2Ô∏è‚É£ L·∫•y t·∫•t c·∫£ folder con trong folder ƒë√≥ (bao g·ªìm folder con s√¢u)
        final foldersToRestore = await _client
            .from('folders')
            .select()
            .ilike('path', '$originalPath%')
            .eq('is_deleted', true);

        for (final f in foldersToRestore) {
          final folderOriginalPath = f['path'] as String;
          final restoredPath = folderOriginalPath.replaceFirst(
            '${user.id}/Trash/',
            '${user.id}/',
          );

          await _client.from('folders').update({
            'path': restoredPath,
            'is_deleted': false,
            'deleted_at': null,
          }).eq('id', f['id']);

          await _client.from(_trashTable).delete().eq('original_id', f['id']);
        }

        // 3Ô∏è‚É£ Restore ch√≠nh folder
        await _client.storage.from('files').move(trash.trashPath, trash.originalPath);
        await _client.from('folders').update({
          'path': trash.originalPath,
          'is_deleted': false,
          'deleted_at': null,
        }).eq('id', trash.originalId);
        await _client.from(_trashTable).delete().eq('id', trash.id);

        print('‚ôªÔ∏è Folder restored: ${trash.originalPath}');
        return true;
      }

      return false;
    } catch (e) {
      print('‚ùå [restoreTrash] L·ªói: $e');
      return false;
    }
  }

  /// ‚ùå X√≥a vƒ©nh vi·ªÖn kh·ªèi Trash
  Future<bool> deletePermanently(Trash trash) async {
    try {
      if (trash.type == 'file') {
        await _client.storage.from('files').remove([trash.trashPath]);
      }

      await _client.from(_trashTable).delete().eq('id', trash.id);

      print('üóëÔ∏è ƒê√£ x√≥a vƒ©nh vi·ªÖn: ${trash.originalPath}');
      return true;
    } catch (e) {
      print('‚ùå [deletePermanently] L·ªói: $e');
      return false;
    }
  }

  /// ‚ùå X√≥a folder c√πng t·∫•t c·∫£ file/folder con trong Trash
  Future<bool> deleteFolderRecursive(Trash folderTrash) async {
    try {
      final folderId = folderTrash.originalId;

      // 1Ô∏è‚É£ L·∫•y t·∫•t c·∫£ folder con
      final subfoldersRes = await _client
          .from('folders')
          .select('*')
          .eq('parent_id', folderId)
          .eq('is_deleted', true); // ch·ªâ folder ƒë√£ move to trash

      final List<dynamic> subfolders = subfoldersRes;

      // 2Ô∏è‚É£ ƒê·ªá quy x√≥a folder con
      for (var sub in subfolders) {
        final subTrash = Trash(
          id: sub['id'],
          type: 'folder',
          originalId: sub['id'],
          originalPath: sub['path'],
          trashPath: '${folderTrash.trashPath}/${sub['name']}',
          deletedAt: DateTime.parse(sub['deleted_at']),
          restored: false,
        );
        await deleteFolderRecursive(subTrash);
      }

      // 3Ô∏è‚É£ L·∫•y t·∫•t c·∫£ file trong folder
      final filesRes = await _client
          .from('files')
          .select('*')
          .eq('folder_id', folderId)
          .eq('is_deleted', true);

      final List<dynamic> files = filesRes;

      // 4Ô∏è‚É£ X√≥a t·ª´ng file vƒ©nh vi·ªÖn
      for (var file in files) {
        final fileTrash = Trash(
          id: file['id'],
          type: 'file',
          originalId: file['id'],
          originalPath: file['path'],
          trashPath: '${folderTrash.trashPath}/${file['name']}',
          deletedAt: DateTime.parse(file['deleted_at']),
          restored: false,
        );
        await deletePermanently(fileTrash);
      }

      // 5Ô∏è‚É£ X√≥a folder ch√≠nh trong storage + trash
      await _client.storage.from('files').remove([folderTrash.trashPath]);
      await _client.from(_trashTable).delete().eq('id', folderTrash.id);
      await _client.from('folders').delete().eq('id', folderId);

      print('üóëÔ∏è ƒê√£ x√≥a vƒ©nh vi·ªÖn folder: ${folderTrash.originalPath}');
      return true;
    } catch (e) {
      print('‚ùå [deleteFolderRecursive] L·ªói: $e');
      return false;
    }
  }
}
